<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:FunFlacts"
             xmlns:eff="clr-namespace:FunFlacts.Effects"
             xmlns:data="clr-namespace:FlagData;assembly=FlagData"
             xmlns:cvt="clr-namespace:FunFlacts.Converters"
             x:Class="FunFlacts.MainPage"
             Title="Fun with Flags">

    <!-- Assign a new ResourceDictionary to the ContentPage.Resources property.
         Add an instance of your EmbeddedImageConverter class to the resources so we can use it in our binding expression.
         - If you implemented the resolving type property on your converter, you can use {x:Type data:Flag} to pass in the 
           proper type to locate the images.
         - You will need to define your XML namespaces to use the custom types in XAML
         - Make sure to give the resource a x:Key -->

    <ContentPage.Resources>
        <ResourceDictionary>
            <cvt:EmbeddedImageConverter x:Key="irConverter" 
                                        ResolvingAssemblyType="{x:Type data:Flag}" />
        </ResourceDictionary>
    </ContentPage.Resources>

    <ContentPage.ToolbarItems>
        <ToolbarItem Text="Previous"
                     Clicked="OnPrevious" 
                     Icon="ic_arrow_drop_up_black.png" />
        <ToolbarItem Text="Next" 
                     Clicked="OnNext" 
                     Icon="ic_arrow_drop_down_black.png" />
        <ToolbarItem Text="Show" 
                     Clicked="OnShow" 
                     Icon="ic_action_search.png" />
    </ContentPage.ToolbarItems>

    <ScrollView>
        <StackLayout Spacing="10">
            <StackLayout.Padding>
                <OnPlatform x:TypeArguments="Thickness">
                    <On Platform="iOS" Value="5,20,5,5" />
                    <On Platform="Android" Value="5,0,5,5" />
                    <On Platform="Windows" Value="10" />
                </OnPlatform>
            </StackLayout.Padding>

            <!-- Data-bind the Image.Source property to the ImageSource property on the flag with a binding.
                 Add your converter to the binding - assign it to the Converter property and use the {StaticResource} 
                 markup extension to retrieve it from resources using your assigned key. -->
            <Image HeightRequest="200" 
                   Source="{Binding CurrentFlag.ImageUrl, Mode=OneWay, Converter={StaticResource irConverter}}"
                   HorizontalOptions="Center"
                   VerticalOptions="Center"
                   Aspect="AspectFit" />

            <!-- This ties the SelectedItem bindable property of the Picker control to the Country property of the BindingContext (flag).
                 Add a new binding for the ItemsSource property to bind it to the Countries property we created on the anonymous object 
                 we assigned to the BindingContext.-->
            <Picker ItemsSource="{Binding Countries}" 
                    SelectedItem="{Binding CurrentFlag.Country, Mode=TwoWay}"/>

            <Label Text="Current Design was Adopted on" 
                   FontAttributes="Bold" />
            
            <DatePicker MinimumDate="01/01/1700" 
                        HorizontalOptions="Start"
                        Date="{Binding CurrentFlag.DateAdopted, Mode=TwoWay}"/>

            <Label Text="Has Shield" 
                   FontAttributes="Bold" />
            
            <Switch IsToggled="{Binding CurrentFlag.IncludesShield, Mode=TwoWay}"/>

            <Label Text="Fun Fact" 
                   FontAttributes="Bold" />
            
            <Label Text="{Binding CurrentFlag.Description}"/>

            <Label x:Name="moreInfo" Text="More Information" Margin="0,0,10,0"
                    TextColor="Blue" HorizontalOptions="End">
                <Label.Effects>
                    <eff:UnderlineEffect />
                </Label.Effects>
                <Label.GestureRecognizers>
                    <TapGestureRecognizer Tapped="OnMoreInformation" />
                </Label.GestureRecognizers>
            </Label>

        </StackLayout>
    </ScrollView>

</ContentPage>